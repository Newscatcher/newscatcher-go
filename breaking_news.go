// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Newscatcher/newscatcher-go/internal"
)

type BreakingNewsGetRequest struct {
	// The sorting order of the results. Possible values are:
	// - `relevancy`: The most relevant results first.
	// - `date`: The most recently published results first.
	// - `rank`: The results from the highest-ranked sources first.
	SortBy *BreakingNewsGetRequestSortBy `json:"-" url:"sort_by,omitempty"`
	// If true, limits the search to sources ranked in the top 1 million online websites. If false, includes unranked sources which are assigned a rank of 999999.
	RankedOnly *bool `json:"-" url:"ranked_only,omitempty"`
	// The lowest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
	FromRank *int `json:"-" url:"from_rank,omitempty"`
	// The highest boundary of the rank of a news website to filter by. A lower rank indicates a more popular source.
	ToRank *int `json:"-" url:"to_rank,omitempty"`
	// The page number to scroll through the results. Use for pagination, as a single API response can return up to 1,000 articles.
	//
	// For details, see [How to paginate large datasets](https://www.newscatcherapi.com/docs/v3/documentation/how-to/paginate-large-datasets).
	Page *int `json:"-" url:"page,omitempty"`
	// The number of articles to return per page.
	PageSize                 *int                      `json:"-" url:"page_size,omitempty"`
	TopNArticles             *TopNArticles             `json:"-" url:"top_n_articles,omitempty"`
	IncludeTranslationFields *IncludeTranslationFields `json:"-" url:"include_translation_fields,omitempty"`
	IncludeNlpData           *IncludeNlpData           `json:"-" url:"include_nlp_data,omitempty"`
	HasNlp                   *HasNlp                   `json:"-" url:"has_nlp,omitempty"`
	// Filters articles based on their general topic, as determined by NLP analysis. To select multiple themes, use a comma-separated string.
	//
	// Example: `"Finance, Tech"`
	//
	// **Note**: The `theme` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	//
	// Available options: `Business`, `Economics`, `Entertainment`, `Finance`, `Health`, `Politics`, `Science`, `Sports`, `Tech`, `Crime`, `Financial Crime`, `Lifestyle`, `Automotive`, `Travel`, `Weather`, `General`.
	Theme *string `json:"-" url:"theme,omitempty"`
	// Inverse of the `theme` parameter. Excludes articles based on their general topic, as determined by NLP analysis. To exclude multiple themes, use a comma-separated string.
	//
	// Example: `"Crime, Tech"`
	//
	// **Note**: The `not_theme` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	NotTheme *string `json:"-" url:"not_theme,omitempty"`
	// Filters articles that mention specific organization names, as identified by NLP analysis. To specify multiple organizations, use a comma-separated string. To search named entities in translations, combine with the translation options of the `search_in` parameter (e.g., `title_content_translated`).
	//
	// Example: `"Apple, Microsoft"`
	//
	// **Note**: The `ORG_entity_name` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [Search by entity](/docs/v3/documentation/how-to/search-by-entity).
	OrgEntityName *string `json:"-" url:"ORG_entity_name,omitempty"`
	// Filters articles that mention specific person names, as identified by NLP analysis. To specify multiple names, use a comma-separated string. To search named entities in translations, combine with the translation options of the `search_in` parameter (e.g., `title_content_translated`).
	//
	// Example: `"Elon Musk, Jeff Bezos"`
	//
	// **Note**: The `PER_entity_name` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [Search by entity](/docs/v3/documentation/how-to/search-by-entity).
	PerEntityName *string `json:"-" url:"PER_entity_name,omitempty"`
	// Filters articles that mention specific location names, as identified by NLP analysis. To specify multiple locations, use a comma-separated string. To search named entities in translations, combine with the translation options of the `search_in` parameter (e.g., `title_content_translated`).
	//
	// Example: `"California, New York"`
	//
	// **Note**: The `LOC_entity_name` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [Search by entity](/docs/v3/documentation/how-to/search-by-entity).
	LocEntityName *string `json:"-" url:"LOC_entity_name,omitempty"`
	// Filters articles that mention other named entities not falling under person, organization, or location categories. Includes events, nationalities, products, works of art, and more. To specify multiple entities, use a comma-separated string. To search named entities in translations, combine with the translation options of the `search_in` parameter (e.g., `title_content_translated`).
	//
	// Example: `"Bitcoin, Blockchain"`
	//
	// **Note**: The `MISC_entity_name` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [Search by entity](/docs/v3/documentation/how-to/search-by-entity).
	MiscEntityName *string `json:"-" url:"MISC_entity_name,omitempty"`
	// Filters articles based on the minimum sentiment score of their titles.
	//
	// Range is `-1.0` to `1.0`, where:
	// - Negative values indicate negative sentiment.
	// - Positive values indicate positive sentiment.
	// - Values close to 0 indicate neutral sentiment.
	//
	// **Note**: The `title_sentiment_min` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	TitleSentimentMin *float64 `json:"-" url:"title_sentiment_min,omitempty"`
	// Filters articles based on the maximum sentiment score of their titles.
	//
	// Range is `-1.0` to `1.0`, where:
	// - Negative values indicate negative sentiment.
	// - Positive values indicate positive sentiment.
	// - Values close to 0 indicate neutral sentiment.
	//
	// **Note**: The `title_sentiment_max` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	TitleSentimentMax *float64 `json:"-" url:"title_sentiment_max,omitempty"`
	// Filters articles based on the minimum sentiment score of their content.
	//
	// Range is `-1.0` to `1.0`, where:
	// - Negative values indicate negative sentiment.
	// - Positive values indicate positive sentiment.
	// - Values close to 0 indicate neutral sentiment.
	//
	// **Note**: The `content_sentiment_min` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	ContentSentimentMin *float64 `json:"-" url:"content_sentiment_min,omitempty"`
	// Filters articles based on the maximum sentiment score of their content.
	//
	// Range is `-1.0` to `1.0`, where:
	// - Negative values indicate negative sentiment.
	// - Positive values indicate positive sentiment.
	// - Values close to 0 indicate neutral sentiment.
	//
	// **Note**: The `content_sentiment_max` parameter is only available if NLP is included in your subscription plan.
	//
	// To learn more, see [NLP features](/docs/v3/documentation/guides-and-concepts/nlp-features).
	ContentSentimentMax *float64 `json:"-" url:"content_sentiment_max,omitempty"`
	// If true, returns only articles/sources that comply with the publisher's robots.txt rules. If false, returns only articles/sources that do not comply with robots.txt rules. If omitted, returns all articles/sources regardless of compliance status.
	RobotsCompliant *bool `json:"-" url:"robots_compliant,omitempty"`
}

type BreakingNewsPostRequest struct {
	SortBy                   *SortBy                   `json:"sort_by,omitempty" url:"-"`
	RankedOnly               *RankedOnly               `json:"ranked_only,omitempty" url:"-"`
	FromRank                 *FromRank                 `json:"from_rank,omitempty" url:"-"`
	ToRank                   *ToRank                   `json:"to_rank,omitempty" url:"-"`
	Page                     *Page                     `json:"page,omitempty" url:"-"`
	PageSize                 *PageSize                 `json:"page_size,omitempty" url:"-"`
	TopNArticles             *TopNArticles             `json:"top_n_articles,omitempty" url:"-"`
	IncludeTranslationFields *IncludeTranslationFields `json:"include_translation_fields,omitempty" url:"-"`
	IncludeNlpData           *IncludeNlpData           `json:"include_nlp_data,omitempty" url:"-"`
	HasNlp                   *HasNlp                   `json:"has_nlp,omitempty" url:"-"`
	Theme                    *Theme                    `json:"theme,omitempty" url:"-"`
	NotTheme                 *NotTheme                 `json:"not_theme,omitempty" url:"-"`
	OrgEntityName            *OrgEntityName            `json:"ORG_entity_name,omitempty" url:"-"`
	PerEntityName            *PerEntityName            `json:"PER_entity_name,omitempty" url:"-"`
	LocEntityName            *LocEntityName            `json:"LOC_entity_name,omitempty" url:"-"`
	MiscEntityName           *MiscEntityName           `json:"MISC_entity_name,omitempty" url:"-"`
	TitleSentimentMin        *TitleSentimentMin        `json:"title_sentiment_min,omitempty" url:"-"`
	TitleSentimentMax        *TitleSentimentMax        `json:"title_sentiment_max,omitempty" url:"-"`
	ContentSentimentMin      *ContentSentimentMin      `json:"content_sentiment_min,omitempty" url:"-"`
	ContentSentientMax       *ContentSentimentMax      `json:"content_sentient_max,omitempty" url:"-"`
	RobotsCompliant          *RobotsCompliant          `json:"robots_compliant,omitempty" url:"-"`
}

// The data model representing a single article in the `Breaking news` search results.
type BreakingNewsArticleEntity struct {
	// The title of the article.
	Title string `json:"title" url:"title"`
	// The primary author of the article.
	Author *string `json:"author,omitempty" url:"author,omitempty"`
	// A list of authors of the article.
	Authors *Authors `json:"authors,omitempty" url:"authors,omitempty"`
	// A list of journalists associated with the article.
	Journalists *Journalists `json:"journalists,omitempty" url:"journalists,omitempty"`
	// The date the article was published.
	PublishedDate *string `json:"published_date,omitempty" url:"published_date,omitempty"`
	// The precision of the published date.
	PublishedDatePrecision *string `json:"published_date_precision,omitempty" url:"published_date_precision,omitempty"`
	// The date the article was last updated.
	UpdatedDate *string `json:"updated_date,omitempty" url:"updated_date,omitempty"`
	// The precision of the updated date.
	UpdatedDatePrecision *string `json:"updated_date_precision,omitempty" url:"updated_date_precision,omitempty"`
	// The date the article was parsed.
	ParseDate *string `json:"parse_date,omitempty" url:"parse_date,omitempty"`
	// The URL link to the article.
	Link string `json:"link" url:"link"`
	// The domain URL of the article.
	DomainUrl string `json:"domain_url" url:"domain_url"`
	// The full domain URL of the article.
	FullDomainUrl string `json:"full_domain_url" url:"full_domain_url"`
	// The name of the source where the article was published.
	NameSource *string `json:"name_source,omitempty" url:"name_source,omitempty"`
	// Indicates if the article is a headline.
	IsHeadline *bool `json:"is_headline,omitempty" url:"is_headline,omitempty"`
	// Indicates if the article is paid content.
	PaidContent *bool `json:"paid_content,omitempty" url:"paid_content,omitempty"`
	// The categorical URL of the article.
	ParentUrl string `json:"parent_url" url:"parent_url"`
	// The country where the article was published.
	Country *string `json:"country,omitempty" url:"country,omitempty"`
	// The rights information for the article.
	Rights *string `json:"rights,omitempty" url:"rights,omitempty"`
	// The rank of the article's source.
	Rank int `json:"rank" url:"rank"`
	// The media associated with the article.
	Media *string `json:"media,omitempty" url:"media,omitempty"`
	// The language in which the article is written.
	Language *string `json:"language,omitempty" url:"language,omitempty"`
	// A brief description of the article.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The content of the article.
	Content string `json:"content" url:"content"`
	// The word count of the article.
	WordCount *int `json:"word_count,omitempty" url:"word_count,omitempty"`
	// Indicates if the article is an opinion piece.
	IsOpinion *bool `json:"is_opinion,omitempty" url:"is_opinion,omitempty"`
	// The Twitter account associated with the article.
	TwitterAccount *string `json:"twitter_account,omitempty" url:"twitter_account,omitempty"`
	// A list of all URLs mentioned in the article.
	AllLinks *BreakingNewsArticleEntityAllLinks `json:"all_links,omitempty" url:"all_links,omitempty"`
	// A list of all domain URLs mentioned in the article.
	AllDomainLinks *BreakingNewsArticleEntityAllDomainLinks `json:"all_domain_links,omitempty" url:"all_domain_links,omitempty"`
	Nlp            *NlpDataEntity                           `json:"nlp,omitempty" url:"nlp,omitempty"`
	// The unique identifier for the article.
	Id string `json:"id" url:"id"`
	// The relevance score of the article.
	Score float64 `json:"score" url:"score"`
	// True if the article content can be safely accessed according to the publisher's robots.txt rules; false otherwise.
	RobotsCompliant *bool `json:"robots_compliant,omitempty" url:"robots_compliant,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreakingNewsArticleEntity) GetTitle() string {
	if b == nil {
		return ""
	}
	return b.Title
}

func (b *BreakingNewsArticleEntity) GetAuthor() *string {
	if b == nil {
		return nil
	}
	return b.Author
}

func (b *BreakingNewsArticleEntity) GetAuthors() *Authors {
	if b == nil {
		return nil
	}
	return b.Authors
}

func (b *BreakingNewsArticleEntity) GetJournalists() *Journalists {
	if b == nil {
		return nil
	}
	return b.Journalists
}

func (b *BreakingNewsArticleEntity) GetPublishedDate() *string {
	if b == nil {
		return nil
	}
	return b.PublishedDate
}

func (b *BreakingNewsArticleEntity) GetPublishedDatePrecision() *string {
	if b == nil {
		return nil
	}
	return b.PublishedDatePrecision
}

func (b *BreakingNewsArticleEntity) GetUpdatedDate() *string {
	if b == nil {
		return nil
	}
	return b.UpdatedDate
}

func (b *BreakingNewsArticleEntity) GetUpdatedDatePrecision() *string {
	if b == nil {
		return nil
	}
	return b.UpdatedDatePrecision
}

func (b *BreakingNewsArticleEntity) GetParseDate() *string {
	if b == nil {
		return nil
	}
	return b.ParseDate
}

func (b *BreakingNewsArticleEntity) GetLink() string {
	if b == nil {
		return ""
	}
	return b.Link
}

func (b *BreakingNewsArticleEntity) GetDomainUrl() string {
	if b == nil {
		return ""
	}
	return b.DomainUrl
}

func (b *BreakingNewsArticleEntity) GetFullDomainUrl() string {
	if b == nil {
		return ""
	}
	return b.FullDomainUrl
}

func (b *BreakingNewsArticleEntity) GetNameSource() *string {
	if b == nil {
		return nil
	}
	return b.NameSource
}

func (b *BreakingNewsArticleEntity) GetIsHeadline() *bool {
	if b == nil {
		return nil
	}
	return b.IsHeadline
}

func (b *BreakingNewsArticleEntity) GetPaidContent() *bool {
	if b == nil {
		return nil
	}
	return b.PaidContent
}

func (b *BreakingNewsArticleEntity) GetParentUrl() string {
	if b == nil {
		return ""
	}
	return b.ParentUrl
}

func (b *BreakingNewsArticleEntity) GetCountry() *string {
	if b == nil {
		return nil
	}
	return b.Country
}

func (b *BreakingNewsArticleEntity) GetRights() *string {
	if b == nil {
		return nil
	}
	return b.Rights
}

func (b *BreakingNewsArticleEntity) GetRank() int {
	if b == nil {
		return 0
	}
	return b.Rank
}

func (b *BreakingNewsArticleEntity) GetMedia() *string {
	if b == nil {
		return nil
	}
	return b.Media
}

func (b *BreakingNewsArticleEntity) GetLanguage() *string {
	if b == nil {
		return nil
	}
	return b.Language
}

func (b *BreakingNewsArticleEntity) GetDescription() *string {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *BreakingNewsArticleEntity) GetContent() string {
	if b == nil {
		return ""
	}
	return b.Content
}

func (b *BreakingNewsArticleEntity) GetWordCount() *int {
	if b == nil {
		return nil
	}
	return b.WordCount
}

func (b *BreakingNewsArticleEntity) GetIsOpinion() *bool {
	if b == nil {
		return nil
	}
	return b.IsOpinion
}

func (b *BreakingNewsArticleEntity) GetTwitterAccount() *string {
	if b == nil {
		return nil
	}
	return b.TwitterAccount
}

func (b *BreakingNewsArticleEntity) GetAllLinks() *BreakingNewsArticleEntityAllLinks {
	if b == nil {
		return nil
	}
	return b.AllLinks
}

func (b *BreakingNewsArticleEntity) GetAllDomainLinks() *BreakingNewsArticleEntityAllDomainLinks {
	if b == nil {
		return nil
	}
	return b.AllDomainLinks
}

func (b *BreakingNewsArticleEntity) GetNlp() *NlpDataEntity {
	if b == nil {
		return nil
	}
	return b.Nlp
}

func (b *BreakingNewsArticleEntity) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BreakingNewsArticleEntity) GetScore() float64 {
	if b == nil {
		return 0
	}
	return b.Score
}

func (b *BreakingNewsArticleEntity) GetRobotsCompliant() *bool {
	if b == nil {
		return nil
	}
	return b.RobotsCompliant
}

func (b *BreakingNewsArticleEntity) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreakingNewsArticleEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler BreakingNewsArticleEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreakingNewsArticleEntity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreakingNewsArticleEntity) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A list of all domain URLs mentioned in the article.
type BreakingNewsArticleEntityAllDomainLinks struct {
	StringList []string
	String     string

	typ string
}

func NewBreakingNewsArticleEntityAllDomainLinksFromStringList(value []string) *BreakingNewsArticleEntityAllDomainLinks {
	return &BreakingNewsArticleEntityAllDomainLinks{typ: "StringList", StringList: value}
}

func NewBreakingNewsArticleEntityAllDomainLinksFromString(value string) *BreakingNewsArticleEntityAllDomainLinks {
	return &BreakingNewsArticleEntityAllDomainLinks{typ: "String", String: value}
}

func (b *BreakingNewsArticleEntityAllDomainLinks) GetStringList() []string {
	if b == nil {
		return nil
	}
	return b.StringList
}

func (b *BreakingNewsArticleEntityAllDomainLinks) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BreakingNewsArticleEntityAllDomainLinks) UnmarshalJSON(data []byte) error {
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		b.typ = "StringList"
		b.StringList = valueStringList
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BreakingNewsArticleEntityAllDomainLinks) MarshalJSON() ([]byte, error) {
	if b.typ == "StringList" || b.StringList != nil {
		return json.Marshal(b.StringList)
	}
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BreakingNewsArticleEntityAllDomainLinksVisitor interface {
	VisitStringList([]string) error
	VisitString(string) error
}

func (b *BreakingNewsArticleEntityAllDomainLinks) Accept(visitor BreakingNewsArticleEntityAllDomainLinksVisitor) error {
	if b.typ == "StringList" || b.StringList != nil {
		return visitor.VisitStringList(b.StringList)
	}
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

// A list of all URLs mentioned in the article.
type BreakingNewsArticleEntityAllLinks struct {
	StringList []string
	String     string

	typ string
}

func NewBreakingNewsArticleEntityAllLinksFromStringList(value []string) *BreakingNewsArticleEntityAllLinks {
	return &BreakingNewsArticleEntityAllLinks{typ: "StringList", StringList: value}
}

func NewBreakingNewsArticleEntityAllLinksFromString(value string) *BreakingNewsArticleEntityAllLinks {
	return &BreakingNewsArticleEntityAllLinks{typ: "String", String: value}
}

func (b *BreakingNewsArticleEntityAllLinks) GetStringList() []string {
	if b == nil {
		return nil
	}
	return b.StringList
}

func (b *BreakingNewsArticleEntityAllLinks) GetString() string {
	if b == nil {
		return ""
	}
	return b.String
}

func (b *BreakingNewsArticleEntityAllLinks) UnmarshalJSON(data []byte) error {
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		b.typ = "StringList"
		b.StringList = valueStringList
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		b.typ = "String"
		b.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BreakingNewsArticleEntityAllLinks) MarshalJSON() ([]byte, error) {
	if b.typ == "StringList" || b.StringList != nil {
		return json.Marshal(b.StringList)
	}
	if b.typ == "String" || b.String != "" {
		return json.Marshal(b.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", b)
}

type BreakingNewsArticleEntityAllLinksVisitor interface {
	VisitStringList([]string) error
	VisitString(string) error
}

func (b *BreakingNewsArticleEntityAllLinks) Accept(visitor BreakingNewsArticleEntityAllLinksVisitor) error {
	if b.typ == "StringList" || b.StringList != nil {
		return visitor.VisitStringList(b.StringList)
	}
	if b.typ == "String" || b.String != "" {
		return visitor.VisitString(b.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", b)
}

// The data model representing a breaking news event with its associated articles.
type BreakingNewsEventEntity struct {
	// Unique identifier for the breaking news event/cluster.
	EventId string `json:"event_id" url:"event_id"`
	// Number of articles in this breaking news cluster.
	ArticlesCount int `json:"articles_count" url:"articles_count"`
	// The articles associated with this breaking news event.
	Articles []*BreakingNewsArticleEntity `json:"articles,omitempty" url:"articles,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreakingNewsEventEntity) GetEventId() string {
	if b == nil {
		return ""
	}
	return b.EventId
}

func (b *BreakingNewsEventEntity) GetArticlesCount() int {
	if b == nil {
		return 0
	}
	return b.ArticlesCount
}

func (b *BreakingNewsEventEntity) GetArticles() []*BreakingNewsArticleEntity {
	if b == nil {
		return nil
	}
	return b.Articles
}

func (b *BreakingNewsEventEntity) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreakingNewsEventEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler BreakingNewsEventEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreakingNewsEventEntity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreakingNewsEventEntity) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The response model for the breaking news requests. Response field behavior:
// - Required fields are guaranteed to be present and non-null.
// - Optional fields may be `null` or `undefined` if the data point is not presented or couldn't be extracted during processing.
// - To access article properties in the `articles` response array, use array index notation. For example, `articles[n].title`, where `n` is the zero-based index of the article object (0, 1, 2, etc.).
// - The `nlp` property within the article object `articles[n].nlp` is only available with NLP-enabled subscription plans.
type BreakingNewsResponseDto struct {
	// The status of the response.
	Status string `json:"status" url:"status"`
	// The total number of articles matching the search criteria.
	TotalHits int `json:"total_hits" url:"total_hits"`
	// The current page number of the results.
	Page int `json:"page" url:"page"`
	// The total number of pages available for the given search criteria.
	TotalPages int `json:"total_pages" url:"total_pages"`
	// The number of articles per page.
	PageSize int `json:"page_size" url:"page_size"`
	// A list of breaking news events, each containing relevant articles.
	BreakingNewsEvents []*BreakingNewsEventEntity `json:"breaking_news_events,omitempty" url:"breaking_news_events,omitempty"`
	UserInput          *UserInputDto              `json:"user_input,omitempty" url:"user_input,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BreakingNewsResponseDto) GetStatus() string {
	if b == nil {
		return ""
	}
	return b.Status
}

func (b *BreakingNewsResponseDto) GetTotalHits() int {
	if b == nil {
		return 0
	}
	return b.TotalHits
}

func (b *BreakingNewsResponseDto) GetPage() int {
	if b == nil {
		return 0
	}
	return b.Page
}

func (b *BreakingNewsResponseDto) GetTotalPages() int {
	if b == nil {
		return 0
	}
	return b.TotalPages
}

func (b *BreakingNewsResponseDto) GetPageSize() int {
	if b == nil {
		return 0
	}
	return b.PageSize
}

func (b *BreakingNewsResponseDto) GetBreakingNewsEvents() []*BreakingNewsEventEntity {
	if b == nil {
		return nil
	}
	return b.BreakingNewsEvents
}

func (b *BreakingNewsResponseDto) GetUserInput() *UserInputDto {
	if b == nil {
		return nil
	}
	return b.UserInput
}

func (b *BreakingNewsResponseDto) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BreakingNewsResponseDto) UnmarshalJSON(data []byte) error {
	type unmarshaler BreakingNewsResponseDto
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BreakingNewsResponseDto(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BreakingNewsResponseDto) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Controls the number of top articles to include for each breaking news event.
//
// **Important limitations**:
// - Maximum value is 100.
// - The product of `top_n_articles` x `page_size` must not exceed 1,000 (total articles limit).
type TopNArticles = int

type BreakingNewsGetRequestSortBy string

const (
	BreakingNewsGetRequestSortByRelevancy BreakingNewsGetRequestSortBy = "relevancy"
	BreakingNewsGetRequestSortByDate      BreakingNewsGetRequestSortBy = "date"
	BreakingNewsGetRequestSortByRank      BreakingNewsGetRequestSortBy = "rank"
)

func NewBreakingNewsGetRequestSortByFromString(s string) (BreakingNewsGetRequestSortBy, error) {
	switch s {
	case "relevancy":
		return BreakingNewsGetRequestSortByRelevancy, nil
	case "date":
		return BreakingNewsGetRequestSortByDate, nil
	case "rank":
		return BreakingNewsGetRequestSortByRank, nil
	}
	var t BreakingNewsGetRequestSortBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BreakingNewsGetRequestSortBy) Ptr() *BreakingNewsGetRequestSortBy {
	return &b
}
