// This file was auto-generated by Fern from our API Definition.

package searchlink

import (
	context "context"
	newscatchergo "github.com/Newscatcher/newscatcher-go"
	core "github.com/Newscatcher/newscatcher-go/core"
	internal "github.com/Newscatcher/newscatcher-go/internal"
	option "github.com/Newscatcher/newscatcher-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Searches for articles based on specified links or IDs. You can filter results by date range.
func (c *Client) SearchUrlGet(
	ctx context.Context,
	request *newscatchergo.SearchUrlGetRequest,
	opts ...option.RequestOption,
) (*newscatchergo.SearchResponseDto, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://v3-api.newscatcherapi.com",
	)
	endpointURL := baseURL + "/api/search_by_link"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &newscatchergo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &newscatchergo.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &newscatchergo.ForbiddenError{
				APIError: apiError,
			}
		},
		408: func(apiError *core.APIError) error {
			return &newscatchergo.RequestTimeoutError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &newscatchergo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &newscatchergo.TooManyRequestsError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &newscatchergo.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *newscatchergo.SearchResponseDto
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches for articles using their ID(s) or link(s).
func (c *Client) SearchUrlPost(
	ctx context.Context,
	request *newscatchergo.SearchUrlPostRequest,
	opts ...option.RequestOption,
) (*newscatchergo.SearchResponseDto, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://v3-api.newscatcherapi.com",
	)
	endpointURL := baseURL + "/api/search_by_link"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &newscatchergo.BadRequestError{
				APIError: apiError,
			}
		},
		401: func(apiError *core.APIError) error {
			return &newscatchergo.UnauthorizedError{
				APIError: apiError,
			}
		},
		403: func(apiError *core.APIError) error {
			return &newscatchergo.ForbiddenError{
				APIError: apiError,
			}
		},
		408: func(apiError *core.APIError) error {
			return &newscatchergo.RequestTimeoutError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &newscatchergo.UnprocessableEntityError{
				APIError: apiError,
			}
		},
		429: func(apiError *core.APIError) error {
			return &newscatchergo.TooManyRequestsError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &newscatchergo.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *newscatchergo.SearchResponseDto
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
