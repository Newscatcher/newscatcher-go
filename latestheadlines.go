// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Newscatcher/newscatcher-go/internal"
)

type LatestHeadlinesGetRequest struct {
	When                *string  `json:"-" url:"when,omitempty"`
	ByParseDate         *string  `json:"-" url:"by_parse_date,omitempty"`
	SortBy              *string  `json:"-" url:"sort_by,omitempty"`
	Lang                string   `json:"-" url:"lang"`
	NotLang             string   `json:"-" url:"not_lang"`
	Countries           string   `json:"-" url:"countries"`
	NotCountries        string   `json:"-" url:"not_countries"`
	Sources             string   `json:"-" url:"sources"`
	PredefinedSources   string   `json:"-" url:"predefined_sources"`
	NotSources          string   `json:"-" url:"not_sources"`
	NotAuthorName       string   `json:"-" url:"not_author_name"`
	RankedOnly          *string  `json:"-" url:"ranked_only,omitempty"`
	IsHeadline          *string  `json:"-" url:"is_headline,omitempty"`
	IsOpinion           *string  `json:"-" url:"is_opinion,omitempty"`
	IsPaidContent       *string  `json:"-" url:"is_paid_content,omitempty"`
	ParentUrl           string   `json:"-" url:"parent_url"`
	AllLinks            string   `json:"-" url:"all_links"`
	AllDomainLinks      string   `json:"-" url:"all_domain_links"`
	WordCountMin        *string  `json:"-" url:"word_count_min,omitempty"`
	WordCountMax        *string  `json:"-" url:"word_count_max,omitempty"`
	Page                *string  `json:"-" url:"page,omitempty"`
	PageSize            *string  `json:"-" url:"page_size,omitempty"`
	ClusteringVariable  *string  `json:"-" url:"clustering_variable,omitempty"`
	ClusteringEnabled   *string  `json:"-" url:"clustering_enabled,omitempty"`
	ClusteringThreshold *float64 `json:"-" url:"clustering_threshold,omitempty"`
	IncludeNlpData      *bool    `json:"-" url:"include_nlp_data,omitempty"`
	HasNlp              *bool    `json:"-" url:"has_nlp,omitempty"`
	Theme               *string  `json:"-" url:"theme,omitempty"`
	NotTheme            *string  `json:"-" url:"not_theme,omitempty"`
	OrgEntityName       *string  `json:"-" url:"ORG_entity_name,omitempty"`
	PerEntityName       *string  `json:"-" url:"PER_entity_name,omitempty"`
	LocEntityName       *string  `json:"-" url:"LOC_entity_name,omitempty"`
	MiscEntityName      *string  `json:"-" url:"MISC_entity_name,omitempty"`
	TitleSentimentMin   *float64 `json:"-" url:"title_sentiment_min,omitempty"`
	TitleSentimentMax   *float64 `json:"-" url:"title_sentiment_max,omitempty"`
	ContentSentimentMin *float64 `json:"-" url:"content_sentiment_min,omitempty"`
	ContentSentimentMax *float64 `json:"-" url:"content_sentiment_max,omitempty"`
	IptcTags            string   `json:"-" url:"iptc_tags"`
	NotIptcTags         string   `json:"-" url:"not_iptc_tags"`
	IabTags             string   `json:"-" url:"iab_tags"`
	NotIabTags          string   `json:"-" url:"not_iab_tags"`
}

type LatestHeadlinesRequest struct {
	When                *string                                    `json:"when,omitempty" url:"-"`
	ByParseDate         *LatestHeadlinesRequestByParseDate         `json:"by_parse_date,omitempty" url:"-"`
	SortBy              *string                                    `json:"sort_by,omitempty" url:"-"`
	Lang                interface{}                                `json:"lang,omitempty" url:"-"`
	NotLang             interface{}                                `json:"not_lang,omitempty" url:"-"`
	Countries           interface{}                                `json:"countries,omitempty" url:"-"`
	NotCountries        interface{}                                `json:"not_countries,omitempty" url:"-"`
	Sources             interface{}                                `json:"sources,omitempty" url:"-"`
	PredefinedSources   interface{}                                `json:"predefined_sources,omitempty" url:"-"`
	NotSources          interface{}                                `json:"not_sources,omitempty" url:"-"`
	NotAuthorName       interface{}                                `json:"not_author_name,omitempty" url:"-"`
	RankedOnly          *LatestHeadlinesRequestRankedOnly          `json:"ranked_only,omitempty" url:"-"`
	IsHeadline          *LatestHeadlinesRequestIsHeadline          `json:"is_headline,omitempty" url:"-"`
	IsOpinion           *LatestHeadlinesRequestIsOpinion           `json:"is_opinion,omitempty" url:"-"`
	IsPaidContent       *LatestHeadlinesRequestIsPaidContent       `json:"is_paid_content,omitempty" url:"-"`
	ParentUrl           interface{}                                `json:"parent_url,omitempty" url:"-"`
	AllLinks            interface{}                                `json:"all_links,omitempty" url:"-"`
	AllDomainLinks      interface{}                                `json:"all_domain_links,omitempty" url:"-"`
	WordCountMin        *LatestHeadlinesRequestWordCountMin        `json:"word_count_min,omitempty" url:"-"`
	WordCountMax        *LatestHeadlinesRequestWordCountMax        `json:"word_count_max,omitempty" url:"-"`
	Page                *LatestHeadlinesRequestPage                `json:"page,omitempty" url:"-"`
	PageSize            *LatestHeadlinesRequestPageSize            `json:"page_size,omitempty" url:"-"`
	ClusteringVariable  *string                                    `json:"clustering_variable,omitempty" url:"-"`
	ClusteringEnabled   *LatestHeadlinesRequestClusteringEnabled   `json:"clustering_enabled,omitempty" url:"-"`
	ClusteringThreshold *LatestHeadlinesRequestClusteringThreshold `json:"clustering_threshold,omitempty" url:"-"`
	IncludeNlpData      *bool                                      `json:"include_nlp_data,omitempty" url:"-"`
	HasNlp              *bool                                      `json:"has_nlp,omitempty" url:"-"`
	Theme               *string                                    `json:"theme,omitempty" url:"-"`
	NotTheme            *string                                    `json:"not_theme,omitempty" url:"-"`
	OrgEntityName       *string                                    `json:"ORG_entity_name,omitempty" url:"-"`
	PerEntityName       *string                                    `json:"PER_entity_name,omitempty" url:"-"`
	LocEntityName       *string                                    `json:"LOC_entity_name,omitempty" url:"-"`
	MiscEntityName      *string                                    `json:"MISC_entity_name,omitempty" url:"-"`
	TitleSentimentMin   *float64                                   `json:"title_sentiment_min,omitempty" url:"-"`
	TitleSentimentMax   *float64                                   `json:"title_sentiment_max,omitempty" url:"-"`
	ContentSentimentMin *float64                                   `json:"content_sentiment_min,omitempty" url:"-"`
	ContentSentimentMax *float64                                   `json:"content_sentiment_max,omitempty" url:"-"`
	IptcTags            interface{}                                `json:"iptc_tags,omitempty" url:"-"`
	NotIptcTags         interface{}                                `json:"not_iptc_tags,omitempty" url:"-"`
	IabTags             interface{}                                `json:"iab_tags,omitempty" url:"-"`
	NotIabTags          interface{}                                `json:"not_iab_tags,omitempty" url:"-"`
}

// LatestHeadlinesResponse DTO class.
type LatestHeadlinesResponse struct {
	Status     *string                  `json:"status,omitempty" url:"status,omitempty"`
	TotalHits  int                      `json:"total_hits" url:"total_hits"`
	Page       int                      `json:"page" url:"page"`
	TotalPages int                      `json:"total_pages" url:"total_pages"`
	PageSize   int                      `json:"page_size" url:"page_size"`
	Articles   []map[string]interface{} `json:"articles,omitempty" url:"articles,omitempty"`
	UserInput  map[string]interface{}   `json:"user_input,omitempty" url:"user_input,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LatestHeadlinesResponse) GetStatus() *string {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *LatestHeadlinesResponse) GetTotalHits() int {
	if l == nil {
		return 0
	}
	return l.TotalHits
}

func (l *LatestHeadlinesResponse) GetPage() int {
	if l == nil {
		return 0
	}
	return l.Page
}

func (l *LatestHeadlinesResponse) GetTotalPages() int {
	if l == nil {
		return 0
	}
	return l.TotalPages
}

func (l *LatestHeadlinesResponse) GetPageSize() int {
	if l == nil {
		return 0
	}
	return l.PageSize
}

func (l *LatestHeadlinesResponse) GetArticles() []map[string]interface{} {
	if l == nil {
		return nil
	}
	return l.Articles
}

func (l *LatestHeadlinesResponse) GetUserInput() map[string]interface{} {
	if l == nil {
		return nil
	}
	return l.UserInput
}

func (l *LatestHeadlinesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LatestHeadlinesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LatestHeadlinesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LatestHeadlinesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LatestHeadlinesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LatestHeadlinesGetResponse struct {
	ClusteringSearchResponse *ClusteringSearchResponse
	LatestHeadlinesResponse  *LatestHeadlinesResponse

	typ string
}

func NewLatestHeadlinesGetResponseFromClusteringSearchResponse(value *ClusteringSearchResponse) *LatestHeadlinesGetResponse {
	return &LatestHeadlinesGetResponse{typ: "ClusteringSearchResponse", ClusteringSearchResponse: value}
}

func NewLatestHeadlinesGetResponseFromLatestHeadlinesResponse(value *LatestHeadlinesResponse) *LatestHeadlinesGetResponse {
	return &LatestHeadlinesGetResponse{typ: "LatestHeadlinesResponse", LatestHeadlinesResponse: value}
}

func (l *LatestHeadlinesGetResponse) GetClusteringSearchResponse() *ClusteringSearchResponse {
	if l == nil {
		return nil
	}
	return l.ClusteringSearchResponse
}

func (l *LatestHeadlinesGetResponse) GetLatestHeadlinesResponse() *LatestHeadlinesResponse {
	if l == nil {
		return nil
	}
	return l.LatestHeadlinesResponse
}

func (l *LatestHeadlinesGetResponse) UnmarshalJSON(data []byte) error {
	valueClusteringSearchResponse := new(ClusteringSearchResponse)
	if err := json.Unmarshal(data, &valueClusteringSearchResponse); err == nil {
		l.typ = "ClusteringSearchResponse"
		l.ClusteringSearchResponse = valueClusteringSearchResponse
		return nil
	}
	valueLatestHeadlinesResponse := new(LatestHeadlinesResponse)
	if err := json.Unmarshal(data, &valueLatestHeadlinesResponse); err == nil {
		l.typ = "LatestHeadlinesResponse"
		l.LatestHeadlinesResponse = valueLatestHeadlinesResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesGetResponse) MarshalJSON() ([]byte, error) {
	if l.typ == "ClusteringSearchResponse" || l.ClusteringSearchResponse != nil {
		return json.Marshal(l.ClusteringSearchResponse)
	}
	if l.typ == "LatestHeadlinesResponse" || l.LatestHeadlinesResponse != nil {
		return json.Marshal(l.LatestHeadlinesResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesGetResponseVisitor interface {
	VisitClusteringSearchResponse(*ClusteringSearchResponse) error
	VisitLatestHeadlinesResponse(*LatestHeadlinesResponse) error
}

func (l *LatestHeadlinesGetResponse) Accept(visitor LatestHeadlinesGetResponseVisitor) error {
	if l.typ == "ClusteringSearchResponse" || l.ClusteringSearchResponse != nil {
		return visitor.VisitClusteringSearchResponse(l.ClusteringSearchResponse)
	}
	if l.typ == "LatestHeadlinesResponse" || l.LatestHeadlinesResponse != nil {
		return visitor.VisitLatestHeadlinesResponse(l.LatestHeadlinesResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesPostResponse struct {
	ClusteringSearchResponse *ClusteringSearchResponse
	LatestHeadlinesResponse  *LatestHeadlinesResponse

	typ string
}

func NewLatestHeadlinesPostResponseFromClusteringSearchResponse(value *ClusteringSearchResponse) *LatestHeadlinesPostResponse {
	return &LatestHeadlinesPostResponse{typ: "ClusteringSearchResponse", ClusteringSearchResponse: value}
}

func NewLatestHeadlinesPostResponseFromLatestHeadlinesResponse(value *LatestHeadlinesResponse) *LatestHeadlinesPostResponse {
	return &LatestHeadlinesPostResponse{typ: "LatestHeadlinesResponse", LatestHeadlinesResponse: value}
}

func (l *LatestHeadlinesPostResponse) GetClusteringSearchResponse() *ClusteringSearchResponse {
	if l == nil {
		return nil
	}
	return l.ClusteringSearchResponse
}

func (l *LatestHeadlinesPostResponse) GetLatestHeadlinesResponse() *LatestHeadlinesResponse {
	if l == nil {
		return nil
	}
	return l.LatestHeadlinesResponse
}

func (l *LatestHeadlinesPostResponse) UnmarshalJSON(data []byte) error {
	valueClusteringSearchResponse := new(ClusteringSearchResponse)
	if err := json.Unmarshal(data, &valueClusteringSearchResponse); err == nil {
		l.typ = "ClusteringSearchResponse"
		l.ClusteringSearchResponse = valueClusteringSearchResponse
		return nil
	}
	valueLatestHeadlinesResponse := new(LatestHeadlinesResponse)
	if err := json.Unmarshal(data, &valueLatestHeadlinesResponse); err == nil {
		l.typ = "LatestHeadlinesResponse"
		l.LatestHeadlinesResponse = valueLatestHeadlinesResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesPostResponse) MarshalJSON() ([]byte, error) {
	if l.typ == "ClusteringSearchResponse" || l.ClusteringSearchResponse != nil {
		return json.Marshal(l.ClusteringSearchResponse)
	}
	if l.typ == "LatestHeadlinesResponse" || l.LatestHeadlinesResponse != nil {
		return json.Marshal(l.LatestHeadlinesResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesPostResponseVisitor interface {
	VisitClusteringSearchResponse(*ClusteringSearchResponse) error
	VisitLatestHeadlinesResponse(*LatestHeadlinesResponse) error
}

func (l *LatestHeadlinesPostResponse) Accept(visitor LatestHeadlinesPostResponseVisitor) error {
	if l.typ == "ClusteringSearchResponse" || l.ClusteringSearchResponse != nil {
		return visitor.VisitClusteringSearchResponse(l.ClusteringSearchResponse)
	}
	if l.typ == "LatestHeadlinesResponse" || l.LatestHeadlinesResponse != nil {
		return visitor.VisitLatestHeadlinesResponse(l.LatestHeadlinesResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestByParseDate struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestByParseDateFromString(value string) *LatestHeadlinesRequestByParseDate {
	return &LatestHeadlinesRequestByParseDate{typ: "String", String: value}
}

func NewLatestHeadlinesRequestByParseDateFromBoolean(value bool) *LatestHeadlinesRequestByParseDate {
	return &LatestHeadlinesRequestByParseDate{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestByParseDate) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestByParseDate) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestByParseDate) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestByParseDate) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestByParseDateVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestByParseDate) Accept(visitor LatestHeadlinesRequestByParseDateVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestClusteringEnabled struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestClusteringEnabledFromString(value string) *LatestHeadlinesRequestClusteringEnabled {
	return &LatestHeadlinesRequestClusteringEnabled{typ: "String", String: value}
}

func NewLatestHeadlinesRequestClusteringEnabledFromBoolean(value bool) *LatestHeadlinesRequestClusteringEnabled {
	return &LatestHeadlinesRequestClusteringEnabled{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestClusteringEnabled) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestClusteringEnabled) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestClusteringEnabled) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestClusteringEnabled) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestClusteringEnabledVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestClusteringEnabled) Accept(visitor LatestHeadlinesRequestClusteringEnabledVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestClusteringThreshold struct {
	Double float64
	String string

	typ string
}

func NewLatestHeadlinesRequestClusteringThresholdFromDouble(value float64) *LatestHeadlinesRequestClusteringThreshold {
	return &LatestHeadlinesRequestClusteringThreshold{typ: "Double", Double: value}
}

func NewLatestHeadlinesRequestClusteringThresholdFromString(value string) *LatestHeadlinesRequestClusteringThreshold {
	return &LatestHeadlinesRequestClusteringThreshold{typ: "String", String: value}
}

func (l *LatestHeadlinesRequestClusteringThreshold) GetDouble() float64 {
	if l == nil {
		return 0
	}
	return l.Double
}

func (l *LatestHeadlinesRequestClusteringThreshold) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestClusteringThreshold) UnmarshalJSON(data []byte) error {
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		l.typ = "Double"
		l.Double = valueDouble
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestClusteringThreshold) MarshalJSON() ([]byte, error) {
	if l.typ == "Double" || l.Double != 0 {
		return json.Marshal(l.Double)
	}
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestClusteringThresholdVisitor interface {
	VisitDouble(float64) error
	VisitString(string) error
}

func (l *LatestHeadlinesRequestClusteringThreshold) Accept(visitor LatestHeadlinesRequestClusteringThresholdVisitor) error {
	if l.typ == "Double" || l.Double != 0 {
		return visitor.VisitDouble(l.Double)
	}
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsHeadline struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestIsHeadlineFromString(value string) *LatestHeadlinesRequestIsHeadline {
	return &LatestHeadlinesRequestIsHeadline{typ: "String", String: value}
}

func NewLatestHeadlinesRequestIsHeadlineFromBoolean(value bool) *LatestHeadlinesRequestIsHeadline {
	return &LatestHeadlinesRequestIsHeadline{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestIsHeadline) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestIsHeadline) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestIsHeadline) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestIsHeadline) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsHeadlineVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestIsHeadline) Accept(visitor LatestHeadlinesRequestIsHeadlineVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsOpinion struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestIsOpinionFromString(value string) *LatestHeadlinesRequestIsOpinion {
	return &LatestHeadlinesRequestIsOpinion{typ: "String", String: value}
}

func NewLatestHeadlinesRequestIsOpinionFromBoolean(value bool) *LatestHeadlinesRequestIsOpinion {
	return &LatestHeadlinesRequestIsOpinion{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestIsOpinion) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestIsOpinion) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestIsOpinion) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestIsOpinion) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsOpinionVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestIsOpinion) Accept(visitor LatestHeadlinesRequestIsOpinionVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsPaidContent struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestIsPaidContentFromString(value string) *LatestHeadlinesRequestIsPaidContent {
	return &LatestHeadlinesRequestIsPaidContent{typ: "String", String: value}
}

func NewLatestHeadlinesRequestIsPaidContentFromBoolean(value bool) *LatestHeadlinesRequestIsPaidContent {
	return &LatestHeadlinesRequestIsPaidContent{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestIsPaidContent) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestIsPaidContent) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestIsPaidContent) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestIsPaidContent) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestIsPaidContentVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestIsPaidContent) Accept(visitor LatestHeadlinesRequestIsPaidContentVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestPage struct {
	String  string
	Integer int

	typ string
}

func NewLatestHeadlinesRequestPageFromString(value string) *LatestHeadlinesRequestPage {
	return &LatestHeadlinesRequestPage{typ: "String", String: value}
}

func NewLatestHeadlinesRequestPageFromInteger(value int) *LatestHeadlinesRequestPage {
	return &LatestHeadlinesRequestPage{typ: "Integer", Integer: value}
}

func (l *LatestHeadlinesRequestPage) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestPage) GetInteger() int {
	if l == nil {
		return 0
	}
	return l.Integer
}

func (l *LatestHeadlinesRequestPage) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		l.typ = "Integer"
		l.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestPage) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return json.Marshal(l.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestPageVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (l *LatestHeadlinesRequestPage) Accept(visitor LatestHeadlinesRequestPageVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return visitor.VisitInteger(l.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestPageSize struct {
	String  string
	Integer int

	typ string
}

func NewLatestHeadlinesRequestPageSizeFromString(value string) *LatestHeadlinesRequestPageSize {
	return &LatestHeadlinesRequestPageSize{typ: "String", String: value}
}

func NewLatestHeadlinesRequestPageSizeFromInteger(value int) *LatestHeadlinesRequestPageSize {
	return &LatestHeadlinesRequestPageSize{typ: "Integer", Integer: value}
}

func (l *LatestHeadlinesRequestPageSize) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestPageSize) GetInteger() int {
	if l == nil {
		return 0
	}
	return l.Integer
}

func (l *LatestHeadlinesRequestPageSize) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		l.typ = "Integer"
		l.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestPageSize) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return json.Marshal(l.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestPageSizeVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (l *LatestHeadlinesRequestPageSize) Accept(visitor LatestHeadlinesRequestPageSizeVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return visitor.VisitInteger(l.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestRankedOnly struct {
	String  string
	Boolean bool

	typ string
}

func NewLatestHeadlinesRequestRankedOnlyFromString(value string) *LatestHeadlinesRequestRankedOnly {
	return &LatestHeadlinesRequestRankedOnly{typ: "String", String: value}
}

func NewLatestHeadlinesRequestRankedOnlyFromBoolean(value bool) *LatestHeadlinesRequestRankedOnly {
	return &LatestHeadlinesRequestRankedOnly{typ: "Boolean", Boolean: value}
}

func (l *LatestHeadlinesRequestRankedOnly) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestRankedOnly) GetBoolean() bool {
	if l == nil {
		return false
	}
	return l.Boolean
}

func (l *LatestHeadlinesRequestRankedOnly) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		l.typ = "Boolean"
		l.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestRankedOnly) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return json.Marshal(l.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestRankedOnlyVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (l *LatestHeadlinesRequestRankedOnly) Accept(visitor LatestHeadlinesRequestRankedOnlyVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Boolean" || l.Boolean != false {
		return visitor.VisitBoolean(l.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestWordCountMax struct {
	String  string
	Integer int

	typ string
}

func NewLatestHeadlinesRequestWordCountMaxFromString(value string) *LatestHeadlinesRequestWordCountMax {
	return &LatestHeadlinesRequestWordCountMax{typ: "String", String: value}
}

func NewLatestHeadlinesRequestWordCountMaxFromInteger(value int) *LatestHeadlinesRequestWordCountMax {
	return &LatestHeadlinesRequestWordCountMax{typ: "Integer", Integer: value}
}

func (l *LatestHeadlinesRequestWordCountMax) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestWordCountMax) GetInteger() int {
	if l == nil {
		return 0
	}
	return l.Integer
}

func (l *LatestHeadlinesRequestWordCountMax) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		l.typ = "Integer"
		l.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestWordCountMax) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return json.Marshal(l.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestWordCountMaxVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (l *LatestHeadlinesRequestWordCountMax) Accept(visitor LatestHeadlinesRequestWordCountMaxVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return visitor.VisitInteger(l.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestWordCountMin struct {
	String  string
	Integer int

	typ string
}

func NewLatestHeadlinesRequestWordCountMinFromString(value string) *LatestHeadlinesRequestWordCountMin {
	return &LatestHeadlinesRequestWordCountMin{typ: "String", String: value}
}

func NewLatestHeadlinesRequestWordCountMinFromInteger(value int) *LatestHeadlinesRequestWordCountMin {
	return &LatestHeadlinesRequestWordCountMin{typ: "Integer", Integer: value}
}

func (l *LatestHeadlinesRequestWordCountMin) GetString() string {
	if l == nil {
		return ""
	}
	return l.String
}

func (l *LatestHeadlinesRequestWordCountMin) GetInteger() int {
	if l == nil {
		return 0
	}
	return l.Integer
}

func (l *LatestHeadlinesRequestWordCountMin) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		l.typ = "String"
		l.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		l.typ = "Integer"
		l.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LatestHeadlinesRequestWordCountMin) MarshalJSON() ([]byte, error) {
	if l.typ == "String" || l.String != "" {
		return json.Marshal(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return json.Marshal(l.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", l)
}

type LatestHeadlinesRequestWordCountMinVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
}

func (l *LatestHeadlinesRequestWordCountMin) Accept(visitor LatestHeadlinesRequestWordCountMinVisitor) error {
	if l.typ == "String" || l.String != "" {
		return visitor.VisitString(l.String)
	}
	if l.typ == "Integer" || l.Integer != 0 {
		return visitor.VisitInteger(l.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", l)
}
