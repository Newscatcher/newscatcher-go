// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Newscatcher/newscatcher-go/internal"
)

// Response model for a successful `Subscription` request retrieving plan information. Response field behavior:
// - Required fields are guaranteed to be present and non-null.
// - Optional fields may be `null`/`undefined` if the data couldn't
// be extracted during processing.
type SubscriptionResponseDto struct {
	// Indicates whether the subscription is currently active.
	Active bool `json:"active" url:"active"`
	// The number of API calls allowed per second allowed in the current plan.
	ConcurrentCalls int `json:"concurrent_calls" url:"concurrent_calls"`
	// The name of the subscription plan.
	Plan string `json:"plan" url:"plan"`
	// The total number of API calls assigned to the current subscription.
	PlanCalls int `json:"plan_calls" url:"plan_calls"`
	// The number of API calls remaining for the current subscription period.
	RemainingCalls int `json:"remaining_calls" url:"remaining_calls"`
	// The number of historical days accessible under the current subscription plan.
	HistoricalDays int `json:"historical_days" url:"historical_days"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscriptionResponseDto) GetActive() bool {
	if s == nil {
		return false
	}
	return s.Active
}

func (s *SubscriptionResponseDto) GetConcurrentCalls() int {
	if s == nil {
		return 0
	}
	return s.ConcurrentCalls
}

func (s *SubscriptionResponseDto) GetPlan() string {
	if s == nil {
		return ""
	}
	return s.Plan
}

func (s *SubscriptionResponseDto) GetPlanCalls() int {
	if s == nil {
		return 0
	}
	return s.PlanCalls
}

func (s *SubscriptionResponseDto) GetRemainingCalls() int {
	if s == nil {
		return 0
	}
	return s.RemainingCalls
}

func (s *SubscriptionResponseDto) GetHistoricalDays() int {
	if s == nil {
		return 0
	}
	return s.HistoricalDays
}

func (s *SubscriptionResponseDto) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscriptionResponseDto) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscriptionResponseDto
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscriptionResponseDto(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscriptionResponseDto) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
