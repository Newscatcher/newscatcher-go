// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/Newscatcher/newscatcher-go/internal"
)

// SubscriptionResponse DTO class.
type SubscriptionResponse struct {
	Active              bool   `json:"active" url:"active"`
	CallsPerSeconds     *int   `json:"calls_per_seconds,omitempty" url:"calls_per_seconds,omitempty"`
	PlanName            string `json:"plan_name" url:"plan_name"`
	UsageAssignedCalls  *int   `json:"usage_assigned_calls,omitempty" url:"usage_assigned_calls,omitempty"`
	UsageRemainingCalls *int   `json:"usage_remaining_calls,omitempty" url:"usage_remaining_calls,omitempty"`
	HistoricalDays      *int   `json:"historical_days,omitempty" url:"historical_days,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SubscriptionResponse) GetActive() bool {
	if s == nil {
		return false
	}
	return s.Active
}

func (s *SubscriptionResponse) GetCallsPerSeconds() *int {
	if s == nil {
		return nil
	}
	return s.CallsPerSeconds
}

func (s *SubscriptionResponse) GetPlanName() string {
	if s == nil {
		return ""
	}
	return s.PlanName
}

func (s *SubscriptionResponse) GetUsageAssignedCalls() *int {
	if s == nil {
		return nil
	}
	return s.UsageAssignedCalls
}

func (s *SubscriptionResponse) GetUsageRemainingCalls() *int {
	if s == nil {
		return nil
	}
	return s.UsageRemainingCalls
}

func (s *SubscriptionResponse) GetHistoricalDays() *int {
	if s == nil {
		return nil
	}
	return s.HistoricalDays
}

func (s *SubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubscriptionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubscriptionResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
